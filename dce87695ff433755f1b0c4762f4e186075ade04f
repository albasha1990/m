{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "de1d80c0_06262e77",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-22T22:31:16Z",
      "side": 1,
      "message": "Huh, but I don\u0027t think anyone else is using prebuilts/rust main-kernel. It is also a separate branch from main, where the platform may use. Why do you need yet another branch? Is it because it is receiving automerger updates from main?",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b0b560_3f175f00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-08-22T22:35:05Z",
      "side": 1,
      "message": "tl;dr: We\u0027re going to drop compilers here that are not release qualified by the Android compiler team to make sure things are working in advance.\n\nWe\u0027re going to drop compilers with features that haven\u0027t made it into any stable rust compiler in there for testing\u0027s sake, so that we know it\u0027s working before we try to start merging things into mainline.\n\nIt basically serves the same purpose as the rest of this manifest - the threshold to land and enable something in mainline is higher, so if we want to, e.g. test that our solution to the `gcov` + `kcfi` + Rust situation is working, or grab a revision of the compiler the Android team hasn\u0027t actually marked as good for public consumption, this will allow our staging-CI to see everything go green, and then we\u0027ll know we have all the features in the pipeline for the Rust compiler, etc.",
      "parentUuid": "de1d80c0_06262e77",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58aed087_4b1e9600",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-22T22:44:27Z",
      "side": 1,
      "message": "Thanks for your information. Sorry, I am still confused. How does this justify another branch? That is, why wouldn\u0027t you just delete/keep the compilers on main-kernel branch directly?\n\nAnd the follow up question: after this change, what would you use the `main-kernel` branch for? \n\nIn addition, perhaps some background information (a doc, a bug number, etc.) would make it more clear to a curious reader.\n\nIn addition, in the manifest, we usually put kernel source code in the branch \"mainline\" and tooling in the branch \"main/main-kernel\" (with the exception of trusty). So using the name \"mainline\" also confuses me. But that\u0027s orthogonal to my question above.",
      "parentUuid": "44b0b560_3f175f00",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8041a28f_9daea576",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-08-22T22:50:04Z",
      "side": 1,
      "message": "I am pretty sure that if I want to put a compiler labeled 1.81.0-pre-plus-patches onto the main-kernel branch, y\u0027all would tell me no. If you\u0027re saying that I *can* just drop any compiler that came off the build servers in there, then you\u0027re correct, I don\u0027t need to edit the manifest, but I didn\u0027t think that\u0027d be your stance.\n\nThe `main-kernel` would be the branch that contains the compiler that actually came from the Android compiler team and which we actually intend to release the kernel with. `main-kernel` would only contain \"real\" compilers rather than preview ones that may be untested or buggy.\n\nThe closest I have to a bug number here is to just link to each of the times kernel/common has not wanted Rust changes backported into it? I can create a bug and paste this info in it if you like.\n\nThe naming is just following the naming of this branch. Perhaps I should have done main-kernel-rust instead, but I\u0027d prefer not to submit another ABSS request to create the branch and wait another week for a new branch.",
      "parentUuid": "58aed087_4b1e9600",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b859716e_f45fb4d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-22T23:00:56Z",
      "side": 1,
      "message": "I see, so if I am understanding correctly, you have this `android-mainline-rust` branch as a \"dev\" / bleeding-edge / super unstable branch, and \"main-kernel\" is your \"a bit stabler\" branch. Is that right?\n\nAlso, since you mentioned\n\n\u003e grab a revision of the compiler the Android team hasn\u0027t actually marked as good for public consumption\n\nIs this `android-mainline-rust` not public accessible?\n\n\u003e The main-kernel would be the branch that contains the compiler that actually came from the Android compiler team and which we actually intend to release the kernel with. main-kernel would only contain \"real\" compilers rather than preview ones that may be untested or buggy.\n\nWould you also be adding another manifest branch / setting up build infra that actually ensures main-kernel continues to work? Otherwise it seems to be that we can\u0027t ensure main-kernel is stabler than your new branch.",
      "parentUuid": "8041a28f_9daea576",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eede5faf_7e958888",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-22T23:04:19Z",
      "side": 1,
      "message": "Also re\n\n\u003e If you\u0027re saying that I *can* just drop any compiler that came off the build servers in there, then you\u0027re correct, I don\u0027t need to edit the manifest, but I didn\u0027t think that\u0027d be your stance.\n\nYeah you can pretty much **delete** any versions that are not used in main-kernel. We have this `main-kernel` branch to be just like `main`, but with fewer numbers of versions to reduce disk space. So deletions are perfectly fine as long as it is unused. (This is orthogonal to the discussion though)",
      "parentUuid": "b859716e_f45fb4d2",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feb13790_c40e14a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-08-22T23:09:07Z",
      "side": 1,
      "message": "\u003eI see, so if I am understanding correctly, you have this android-mainline-rust branch as a \"dev\" / bleeding-edge / super unstable branch, and \"main-kernel\" is your \"a bit stabler\" branch. Is that right?\n\nYes, that\u0027s correct\n\n\u003e Is this `android-mainline-rust` not public accessible?\n\nIt is publicly accessible. By \"not good for public consumption\" I mean that it may have various forms of brokenness that make it unsupported and not in a state we want a random team building something with it and expecting it to work.\n\n\u003e Would you also be adding another manifest branch / setting up build infra that actually ensures main-kernel continues to work? Otherwise it seems to be that we can\u0027t ensure main-kernel is stabler than your new branch.\n\nThis is the separate manifest branch for dev. The intention was to use `common-android-mainline` with `--rust` and eventually with an updated gki_defconfig to ensure that `main-kernel` works. Nothing in this manifest branch will ever ship directly - it\u0027s a staging ground for making sure everything is working so we can make sure that once everything in the various release pipelines finishes going through, all the builds in `common-android-mainline` will work to avoid surprises like last time.\n\nMany of our patches have long time horizons before we can see them integrated in `common-android-mainline`, for example:\n1. A compiler patch that lands upstream may take up to 6 weeks to hit beta, another 6 to hit stable, and then a few weeks for the toolchain team to roll a new release. We can sometimes shortcut this process by cherry picking this back into the compiler early, but even that can be a multi-week delay.\n2. Sending a change to the kernel can take an indefinite amount of time to get reviewed, and even once merged, has a time delay before landing in the mainline kernel.\n3. Getting changes applied to tools requires sending the change upstream, syncing the tool, then picking a new prebuilt.\n\nThe point of this branch is to try to act as an ad-hoc integration branch so that we can verify that once all the changes we have in these multi-month release pipelines finally get blessed enough that they are allowed to go to `common-android-mainline`, they\u0027ll all work together. Without something like this integration branch, we effectively live on a multi-month development cycle, because the next \"Oh, gcov doesn\u0027t work with KCFI and Rust enabled\" type bug is unlikely to be detected on a developer\u0027s machine.",
      "parentUuid": "b859716e_f45fb4d2",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}