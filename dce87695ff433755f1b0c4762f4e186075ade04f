{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "de1d80c0_06262e77",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-22T22:31:16Z",
      "side": 1,
      "message": "Huh, but I don\u0027t think anyone else is using prebuilts/rust main-kernel. It is also a separate branch from main, where the platform may use. Why do you need yet another branch? Is it because it is receiving automerger updates from main?",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b0b560_3f175f00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-08-22T22:35:05Z",
      "side": 1,
      "message": "tl;dr: We\u0027re going to drop compilers here that are not release qualified by the Android compiler team to make sure things are working in advance.\n\nWe\u0027re going to drop compilers with features that haven\u0027t made it into any stable rust compiler in there for testing\u0027s sake, so that we know it\u0027s working before we try to start merging things into mainline.\n\nIt basically serves the same purpose as the rest of this manifest - the threshold to land and enable something in mainline is higher, so if we want to, e.g. test that our solution to the `gcov` + `kcfi` + Rust situation is working, or grab a revision of the compiler the Android team hasn\u0027t actually marked as good for public consumption, this will allow our staging-CI to see everything go green, and then we\u0027ll know we have all the features in the pipeline for the Rust compiler, etc.",
      "parentUuid": "de1d80c0_06262e77",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58aed087_4b1e9600",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-22T22:44:27Z",
      "side": 1,
      "message": "Thanks for your information. Sorry, I am still confused. How does this justify another branch? That is, why wouldn\u0027t you just delete/keep the compilers on main-kernel branch directly?\n\nAnd the follow up question: after this change, what would you use the `main-kernel` branch for? \n\nIn addition, perhaps some background information (a doc, a bug number, etc.) would make it more clear to a curious reader.\n\nIn addition, in the manifest, we usually put kernel source code in the branch \"mainline\" and tooling in the branch \"main/main-kernel\" (with the exception of trusty). So using the name \"mainline\" also confuses me. But that\u0027s orthogonal to my question above.",
      "parentUuid": "44b0b560_3f175f00",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8041a28f_9daea576",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2024-08-22T22:50:04Z",
      "side": 1,
      "message": "I am pretty sure that if I want to put a compiler labeled 1.81.0-pre-plus-patches onto the main-kernel branch, y\u0027all would tell me no. If you\u0027re saying that I *can* just drop any compiler that came off the build servers in there, then you\u0027re correct, I don\u0027t need to edit the manifest, but I didn\u0027t think that\u0027d be your stance.\n\nThe `main-kernel` would be the branch that contains the compiler that actually came from the Android compiler team and which we actually intend to release the kernel with. `main-kernel` would only contain \"real\" compilers rather than preview ones that may be untested or buggy.\n\nThe closest I have to a bug number here is to just link to each of the times kernel/common has not wanted Rust changes backported into it? I can create a bug and paste this info in it if you like.\n\nThe naming is just following the naming of this branch. Perhaps I should have done main-kernel-rust instead, but I\u0027d prefer not to submit another ABSS request to create the branch and wait another week for a new branch.",
      "parentUuid": "58aed087_4b1e9600",
      "revId": "dce87695ff433755f1b0c4762f4e186075ade04f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}